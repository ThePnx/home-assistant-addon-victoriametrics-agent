#!/usr/bin/with-contenv bashio
# ==============================================================================
# Start the service
# s6-overlay docs: https://github.com/just-containers/s6-overlay
# ==============================================================================

declare -a options
declare log_level

# Check if the log level configuration option exists
if bashio::config.exists log_level; then

    # Find the matching LOG_LEVEL
    log_level=$(bashio::string.lower "$(bashio::config log_level)")
    case "${log_level}" in
        all)
            log_level="${__BASHIO_LOG_LEVEL_ALL}"
            ;;
        trace)
            log_level="${__BASHIO_LOG_LEVEL_TRACE}"
            ;;
        debug)
            log_level="${__BASHIO_LOG_LEVEL_DEBUG}"
            ;;
        info)
            log_level="${__BASHIO_LOG_LEVEL_INFO}"
            ;;
        notice)
            log_level="${__BASHIO_LOG_LEVEL_NOTICE}"
            ;;
        warning)
            log_level="${__BASHIO_LOG_LEVEL_WARNING}"
            ;;
        error)
            log_level="${__BASHIO_LOG_LEVEL_ERROR}"
            ;;
        fatal)
            log_level="${__BASHIO_LOG_LEVEL_FATAL}"
            ;;
        off)
            log_level="${__BASHIO_LOG_LEVEL_OFF}"
            ;;
        *)
            bashio::exit.nok "Unknown log_level: ${log_level}"
    esac

    # Save determined log level so S6 can pick it up later
    echo "${log_level}" > /var/run/s6/container_environment/LOG_LEVEL
    export __BASHIO_LOG_LEVEL="${log_level}"
    bashio::log.blue "Log level is set to ${__BASHIO_LOG_LEVELS[$log_level]}"
fi

bashio::log.info "Starting VictoriaMetrics vmagent..."

if bashio::config.true 'promscrape.enabled'; then
    options+=("-promscrape.config=$(bashio::config 'promscrape.config')")
    options+=("-promscrape.config.strictParse=$(bashio::config 'promscrape.config.strictParse')")
    bashio::log.debug "promscrape.config enabled, options set: -promscrape.config=$(bashio::config 'promscrape.config'), -promscrape.config.strictParse=$(bashio::config 'promscrape.config.strictParse')"
else
    options+=("-remoteWrite.url=$(bashio::config 'remoteWrite.url')")
    bashio::log.debug "remoteWrite.url enabled, option set: -remoteWrite.url=$(bashio::config 'remoteWrite.url')"
fi

bashio::log.debug "Remote Write authentication enabled flag to = $(bashio::config 'remoteWrite.authenticationEnabled')"

if bashio::config.true 'remoteWrite.authenticationEnabled'; then
  if bashio::config.has_value 'remoteWrite.basicAuthUsername'; then
    options+=("-remoteWrite.basicAuth.username=$(bashio::config 'remoteWrite.basicAuthUsername')")
    bashio::log.debug "remoteWrite authentication enabled, option set: -remoteWrite.basicAuth.username=$(bashio::config 'remoteWrite.basicAuthUsername')"
  fi

  if bashio::config.has_value 'remoteWrite.basicAuthPassword'; then
    options+=("-remoteWrite.basicAuth.password=$(bashio::config 'remoteWrite.basicAuthPassword')")
    bashio::log.debug "remoteWrite authentication enabled, option set: -remoteWrite.basicAuth.password=secret"
  fi

  if bashio::config.has_value 'remoteWrite.basicAuthPasswordFile'; then
    options+=("-remoteWrite.basicAuth.passwordFile=$(bashio::config 'remoteWrite.basicAuthPasswordFile')")
    bashio::log.debug "remoteWrite authentication enabled, option set: -remoteWrite.basicAuth.passwordFile=$(bashio::config 'remoteWrite.basicAuthPasswordFile')"
  fi

  if bashio::config.has_value 'remoteWrite.bearerToken'; then
    options+=("-remoteWrite.bearerToken=$(bashio::config 'remoteWrite.bearerToken')")
    bashio::log.debug "remoteWrite authentication enabled, option set: --remoteWrite.bearerToken=secret"
  fi

  if bashio::config.has_value 'remoteWrite.bearerTokenFile'; then
    options+=("-remoteWrite.bearerTokenFile=$(bashio::config 'remoteWrite.bearerTokenFile')")
    bashio::log.debug "remoteWrite authentication enabled, option set: -remoteWrite.bearerTokenFile=$(bashio::config 'remoteWrite.bearerTokenFile')"
  fi

  if bashio::config.has_value 'remoteWrite.tlsCAFile'; then
    options+=("-remoteWrite.tlsCAFile=$(bashio::config 'remoteWrite.tlsCAFile')")
    bashio::log.debug "remoteWrite authentication enabled, option set: -remoteWrite.tlsCAFile=$(bashio::config 'remoteWrite.tlsCAFile')"
  fi

  if bashio::config.has_value 'remoteWrite.tlsCertFile'; then
    options+=("-remoteWrite.tlsCertFile=$(bashio::config 'remoteWrite.tlsCertFile')")
    bashio::log.debug "remoteWrite authentication enabled, option set: -remoteWrite.tlsCertFile=$(bashio::config 'remoteWrite.tlsCertFile')"
  fi

  if bashio::config.has_value 'remoteWrite.tlsInsecureSkipVerify'; then
    options+=("-remoteWrite.tlsInsecureSkipVerify=$(bashio::config 'remoteWrite.tlsInsecureSkipVerify')")
    bashio::log.debug "remoteWrite authentication enabled, option set: -remoteWrite.tlsInsecureSkipVerify=$(bashio::config 'remoteWrite.tlsInsecureSkipVerify')"
  fi

  if bashio::config.has_value 'remoteWrite.tlsKeyFile'; then
    options+=("-remoteWrite.tlsKeyFile=$(bashio::config 'remoteWrite.tlsKeyFile')")
    bashio::log.debug "remoteWrite authentication enabled, option set: -remoteWrite.tlsKeyFile=$(bashio::config 'remoteWrite.tlsKeyFile')"
  fi

  if bashio::config.has_value 'remoteWrite.tlsServerName'; then
    options+=("-remoteWrite.tlsServerName=$(bashio::config 'remoteWrite.tlsServerName')")
    bashio::log.debug "remoteWrite authentication enabled, option set: -remoteWrite.tlsServerName=$(bashio::config 'remoteWrite.tlsServerName')"
  fi
fi

if bashio::config.true 'httpAuth.enabled'; then
  options+=("-httpAuth.username=$(bashio::config httpAuth.username)")
  options+=("-httpAuth.password=$(bashio::config httpAuth.password)")
  bashio::log.debug "httpAuth enabled, options set: -httpAuth.username=$(bashio::config httpAuth.username), -httpAuth.password=secret"
fi

if bashio::config.has_value 'httpListenAddr.tcp'; then
  options+=("-httpListenAddr=$(bashio::config httpListenAddr.tcp)")
  bashio::log.debug "httpListenAddr enabled, option set: -httpListenAddr=$(bashio::config httpListenAddr.tcp)"
fi

if bashio::config.has_value 'httpListenAddr.useProxyProtocol'; then
  options+=("-httpListenAddr.useProxyProtocol=$(bashio::config httpListenAddr.useProxyProtocol)")
  bashio::log.debug "httpListenAddr.useProxyProtocol enabled, option set: -httpListenAddr.useProxyProtocol=$(bashio::config httpListenAddr.useProxyProtocol)"
fi

if bashio::config.true 'tls.enabled'; then
  options+=("-tls")
  options+=("-tlsCertFile=$(bashio::config tls.certFile)")
  options+=("-tlsKeyFile=$(bashio::config tls.keyFile)")
  options+=("-tlsMinVersion=$(bashio::config tls.minVersion)")
  bashio::log.debug "TLS enabled, options set: -tls, -tlsCertFile=$(bashio::config tls.certFile), -tlsKeyFile=$(bashio::config tls.keyFile), -tlsMinVersion=$(bashio::config tls.minVersion)"
fi

#WARNING! This will log all secrets in plaintext
#bashio::log.trace "Options: ${options[@]}"

## Run your program
exec /vmagent-prod  "${options[@]}"